var search_data = {"index":{"searchIndex":["board","game","input","object","player","leave()","name()","new()","new()","new()","new_game()","pick_entry()","play()","play_computer()","win?()","yes_or_no()"],"longSearchIndex":["board","game","input","object","player","game#leave()","input#name()","board::new()","game::new()","player::new()","game#new_game()","game#pick_entry()","game#play()","game#play_computer()","game#win?()","input#yes_or_no()"],"info":[["Board","","Board.html","","<p>Creates and maintains the tic tac toe board\n"],["Game","","Game.html","","<p>Creates a new game cycle\n"],["Input","","Input.html","","<p>Used for user inputs\n"],["Object","","Object.html","",""],["Player","","Player.html","","<p>Creates and maintains the players\n"],["leave","Game","Game.html#method-i-leave","()","<p>thanks player for playing and exits\n"],["name","Input","Input.html#method-i-name","()","<p>allows user to enter their name\n"],["new","Board","Board.html#method-c-new","()","<p>Creates an empty new game board\n"],["new","Game","Game.html#method-c-new","()","<p>creates the winning combos, substitution hash, available choices, and\ncreates two new players with names â€¦\n"],["new","Player","Player.html#method-c-new","(name, piece)","<p>Sets player name, which piece he has and creates empty storage for entries\n"],["new_game","Game","Game.html#method-i-new_game","()","<p>run at the end of the game to ask if you want to play again\n"],["pick_entry","Game","Game.html#method-i-pick_entry","()","<p>get&#39;s input for computer\n"],["play","Game","Game.html#method-i-play","()","<p>runs the game for two players\n"],["play_computer","Game","Game.html#method-i-play_computer","()","<p>runs the game for one player and one computer\n"],["win?","Game","Game.html#method-i-win-3F","(player_entries)","<p>returns boolean if checking if the player has won or not\n"],["yes_or_no","Input","Input.html#method-i-yes_or_no","()","<p>allows user to input &#39;yes&#39; or &#39;no&#39; answer\n"]]}}